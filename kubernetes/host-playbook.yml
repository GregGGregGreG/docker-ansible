---
- hosts: host
  tasks:
    - name: Install packages
      apt: name={{item}} state=latest update_cache=true cache_valid_time=3600
      with_items:
        - qemu-kvm
        - libvirt-bin
        - python-libvirt
        - python-vm-builder
        - apt-cacher-ng
        - tree
        - htop
        - telnet
        - ncdu

    - name: Get list of vms
      virt: command=list_vms
      register: virt_vms

    - debug: var=virt_vms.list_vms
    - debug: var=groups.vms

    - name: Create VMs 
      command: vmbuilder kvm ubuntu
        --hostname={{item}}
        -d /media/ssd500/kvm/{{item}}
        --suite=trusty 
        --flavour=virtual 
        -o 
        --tmpfs=- 
        --ssh-key=/root/.ssh/authorized_keys 
        --proxy=http://{{inventory_hostname}}:3142 
        --libvirt=qemu:///system 
        --mem=4096
        --rootsize '50480' 
        --cpus=2 
        --bridge=br0 
        --addpkg=openssh-server 
        --addpkg=acpid 
        --addpkg=linux-image-generic 
        --addpkg=apt-transport-https
        --debug
      with_items: groups.vms
      when: item not in virt_vms.list_vms

    - name: Destroy VMs not on list
      virt: name={{item}} state=destroyed
      with_items: virt_vms.list_vms
      when: item not in groups.vms

    - name: Undefine VMs not on list
      virt: name={{item}} command=undefine
      with_items: virt_vms.list_vms
      when: item not in groups.vms

    - name: Run VMs
      virt: name={{item}} state=running
      with_items: groups.vms

    - name: Wait for VMs to run
      local_action: wait_for 
                    host={{item}}
                    port=22
                    delay=1
                    timeout=60
      with_items: groups.vms
      ignore_errors: yes

- hosts: vms
  tasks:
    - name: Bypass apt-cacher-ng for HTTPS
      lineinfile: create=yes dest=/etc/apt/apt.conf line='Acquire::https::Proxy "false";'

    - name: Add Docker Repository Key
      apt_key: keyserver='hkp://p80.pool.sks-keyservers.net:80' id='58118E89F3A912897C070ADBF76221572C52609D'
 
    - name: Add Docker Repository
      apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' state=present

    - name: Install packages
      apt: name={{item}} state=latest update_cache=true cache_valid_time=3600
      with_items:
        - docker-engine
        - ncdu
        - dnsutils
        - update-notifier
        - telnet
        - htop
        - sysstat
        - curl
        - jq
        - apparmor
        - bridge-utils
        - openvswitch-switch
    
    - name: checkout docker-kubernetes-node
      git: repo=https://github.com/mingfang/docker-kubernetes-node.git dest=/root/docker-kubernetes-node

    - name: Setup OVS
      shell: ./ovs-setup.sh
      args:
        chdir: /root/docker-kubernetes-node
      when: "'kbr0' not in ansible_interfaces"

    - name: Configure Docker to user OVS bridge
      lineinfile: create=yes dest=/etc/default/docker line='DOCKER_OPTS="--bridge=kbr0 --mtu=1420 --insecure-registry {{docker_registry}} --iptables=true --storage-driver=aufs"' regexp='^DOCKER_OPTS'
      register: docker_opts
      
    - name: Restart Docker when DOCKER_OPTS changed
      service: name=docker state=restarted
      when: docker_opts.changed

    - name: Remote Docker init.d
      file: path=/etc/init.d/docker state=absent

    - name: Ensure Docker is Running
      service: name=docker state=started

    - name: Clean Exited containers
      shell: docker rm `docker ps -aq` || true
      changed_when: False
      
    - name: Clean untagged images
      shell: docker rmi `docker images | grep "^<none>" | awk '{print $3}'` || true
      changed_when: False

    - name: pull kubernetes-node image
      shell: docker pull {{docker_registry}}/kubernetes-node:latest
      register: docker_pull
      changed_when: docker_pull.stdout.find("Downloaded newer") > 0

    - name: Check Node Update
      debug: msg="Kubernetes Node Update Available"
      when: docker_pull.stdout.find("Downloaded newer") > 0

    - name: Check if node is running
      shell: docker ps
      register: docker_ps
      changed_when: docker_ps.stdout.find("kubernetes-node") == -1

    - name: Make Manifest Directory
      file: dest=/root/docker-kubernetes-node/manifests state=directory

    - name: Copy Manifests
      copy: src={{item}} dest=/root/docker-kubernetes-node/manifests/
      with_fileglob:
        - kubernetes/manifests/*

    - name: Start Node
      shell: >
              docker run \
                     -e LABELS="zone=green" \
                     --pid=host \
                     --net=host \
                     -p 10250:10250 \
                     --privileged=true \
                     -e KUBERNETES_MASTER="{{kubernetes_master}}" \
                     -e ETCD_HOST={{etcd_host}} \
                     -v `pwd`/manifests:/etc/kubernetes/manifests \
                     -v /var/run/docker.sock:/run/docker.sock \
                     -v /var/run/openvswitch/db.sock:/var/run/openvswitch/db.sock \
                     -v /:/rootfs:ro \
                     -v /var/lib/docker:/var/lib/docker:rw \
                     -v /var/lib/kubelet:/var/lib/kubelet:rw \
                     -v /var/run:/var/run:rw \
                     -d {{docker_registry}}/kubernetes-node:latest
      args:
        chdir: /root/docker-kubernetes-node
      when: docker_ps.stdout.find("kubernetes-node") == -1
     
