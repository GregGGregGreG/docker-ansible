- name: Kubernetes Playbook
  hosts: 127.0.0.1
  connection: local
  vars:
    service_template: "service.j2"
    controller_template: "controller.j2"
    endpoints_template: "endpoints.j2"
    secret_template: "secret.j2"
    daemonset_template: "daemonset.j2"
    deployment_template: "deployment.j2"
    configmap_template: "configmap.j2"
    dest_path: /docker
    services: []
  # vars_files:
  #   - "services.yml"
  tasks:

    # ConfigMap

    - name: configmap template
      template: src={{configmap_template}} dest={{dest_path}}/{{item.name}}-configmap.json
      with_items: "{{ configmaps | default([]) }}"
      no_log: True
      tags: [configmap, template]

    - name: apply configmaps
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-configmap.json'}}
      with_items: "{{ configmaps | default([]) }}"
      no_log: True
      tags: [configmap]

    # Secrets

    - name: secret template
      template: src={{secret_template}} dest={{dest_path}}/{{item.name}}-secret.json
      with_items: "{{ secrets | default([]) }}"
      no_log: True
      tags: [secret, template]

    - name: apply secrets
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-secret.json'}}
      with_items: "{{ secrets | default([]) }}"
      no_log: True
      tags: [secret]

    # DaemonSets

    - name: daemonset template
      template: src={{daemonset_template}} dest={{dest_path}}/{{item.name}}-daemonset.json
      with_items: "{{ daemonsets | default([]) }}"
      no_log: True
      tags: [daemonset, template]

    - name: apply daemonsets
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-daemonset.json'}}
      with_items: "{{ daemonsets | default([]) }}"
      no_log: True
      tags: [daemonset]

    # Services

    - name: service template
      template: src={{service_template}} dest={{dest_path}}/{{item.name}}-service.json
      with_items: "{{ services | default([]) }}"
      no_log: True
      tags: [service, template]

    - name: apply services
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-service.json'}}
      with_items: "{{ services | default([]) }}"
      no_log: True
      tags: [service]

    - name: get services
      command: kubectl --server="{{kubernetes_master}}" get services -l "component!=apiserver" -o json
      register: existing_services
      no_log: True
      changed_when: False
      tags: [service, audit, delete]

    - name: audit services
      debug: msg="service {{ item.metadata.name }} was not defined"
      with_items: "{{ (existing_services.stdout|from_json)['items'] }}"
      when: item.metadata.name not in services|map(attribute='name')
      no_log: False
      tags: [service, audit, delete]

    - name: delete undefined services
      command: kubectl --server="{{kubernetes_master}}" delete service "{{ item.metadata.name }}"
      with_items: "{{ (existing_services.stdout|from_json)['items'] }}"
      when: services|length > 0 and item.metadata.name not in services|map(attribute='name')
      no_log: False
      tags: [service, delete]

    # Replication Controllers

    - name: controller template
      template: src={{controller_template}} dest={{dest_path}}/{{item.name}}-controller.json
      with_items: "{{ services }}"
      when: item.containers is defined and item.strategy is not defined
      no_log: True
      tags: [controller, template]

    - name: apply controllers
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-controller.json'}}
      with_items: "{{ services }}"
      when: item.containers is defined and item.strategy is not defined
      no_log: True
      tags: [controller]

    # - name: delete other replicationControllers
    #   uri: url={{kubernetes_master}}/api/v1/namespaces/default/replicationcontrollers/{{item.metadata.name}}
    #   with_items: existing_controllers.json['items']
    #   when: item.spec.selector.name not in services|map(attribute='name')
    #   no_log: True

    # Deployments

    - name: deployment template
      template: src={{deployment_template}} dest={{dest_path}}/{{item.name}}-deployment.json
      with_items: "{{ services }}"
      when: item.containers is defined and item.strategy is defined
      no_log: True
      tags: [deployment, template]

    - name: apply deployments
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-deployment.json'}}
      with_items: "{{ services }}"
      when: item.containers is defined and item.strategy is defined
      no_log: True
      tags: [deployment]

    # Endpoints

    - name: endpoints template
      template: src={{endpoints_template}} dest={{dest_path}}/{{item.name}}-endpoints.json
      with_items: "{{ services }}"
      when: item.endpoints is defined
      no_log: True
      tags: [endpoint, template]

    - name: apply endpoints
      command: kubectl --server="{{kubernetes_master}}" apply -f {{dest_path + '/' + item.name + '-endpoints.json'}}
      with_items: "{{ services }}"
      when: item.endpoints is defined
      no_log: True
      tags: [endpoint]
