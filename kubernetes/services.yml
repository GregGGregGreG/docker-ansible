zone-green: &green
  nodeSelector:
    zone: green

zone-orange: &orange
  nodeSelector:
    zone: orange

secrets:
  - name: ssh-key-secret
    data:
      id-rsa: "dmFsdWUtMg0KDQo="
      id-rsa.pub: "dmFsdWUtMQ0K"
  - name: jenkins-ssh-key
    data:
      id-rsa: "{{ jenkins_ssh_key }}"

configmaps:
  - name: global
    data:
      node-env: production
      etcd-host: "{{ ETCD_HOST }}"
      zookeeper: zookeeper:2181
      tz: America/New_York

volumes:
  - {name: log, emptyDir: {}}

volumeMounts:
  - {name: log, mountPath: /var/log}

sidecars:
  - name: fluentd-kafka
    image: tristar:5000/fluentd-kafka:latest
    imagePullPolicy: Always
    volumeMounts:
      - {name: log, mountPath: /var/log}
  - name: fluentd-graylog
    image: tristar:5000/fluentd-graylog:latest
    imagePullPolicy: Always
    volumeMounts:
      - {name: log, mountPath: /var/log}
    env:
      - {name: GRAYLOG_HOST, value: "graylog"}
      - {name: GRAYLOG_PORT, value: "12201"}

daemonsets:
  - name: zabbix-agent
    hostNetwork: true
    hostPID: true
    containers:
      - name: zabbix-agent
        image: tristar:5000/zabbix-agent:latest
        ports:
          - {containerPort: 10050}
        env:
          - {name: ZABBIX_SERVER, value: zabbix}
          - {name: TZ, value: America/New_York}

  - name: docker-gc
    containers:
      - name: gc
        image: tristar:5000/gc:latest
        env:
          - {name: TZ, value: America/New_York}
        volumeMounts:
          - {name: docker,  mountPath: /var/run/docker.sock}
    volumes:
      - name: docker
        hostPath:
          path: /var/run/docker.sock

  - name: spark-slave
    containers:
      - name: spark-slave
        image: tristar:5000/spark-slave:latest
        ports:
          - {containerPort: 8081}
        env:
          - name: SPARK_MASTER_URL
            value: "spark://spark-master:7077"

  # - name: flink-slave
  #   containers:
  #     - name: flink-slave
  #       image: tristar:5000/flink-slave:latest
  #       ports:
  #         - {containerPort: 6121}
  #         - {containerPort: 6122}
  #       env:
  #         - name: FLINK_MASTER
  #           value: "flink-master"

services:
  - name: registry
    ports:
      - port: 5000
    nodeSelector:
      host: tristar
    annotations:
      nginx:
        - http:
          - server: default
            locations:
              - /v2
      icon: https://avatars2.githubusercontent.com/u/5429470?v=3&s=200
    strategy: RollingUpdate
    volumes:
      - {name: registry, hostPath: {path: '/root/docker-registry/data2'}}
    containers:
      - name: registry
        image: registry:2
        imagePullPolicy: Always
        ports:
          - {containerPort: 5000, hostPort: 5000}
        volumeMounts:
          - {name: registry, mountPath: /var/lib/registry}

  - name: knginx
    ports:
      - {port: 80, name: http}
      - {port: 443, name: https}
      - {port: 90, name: admin}
    nodeSelector:
      host: tristar
    annotations:
      icon: http://nginx.org/nginx.png
    strategy: RollingUpdate
    containers:
      - name: knginx
        image: tristar:5000/knginx:latest
        scm: https://github.com/mingfang/docker-knginx.git
        imagePullPolicy: Always
        ports:
          - {containerPort: 80,    hostPort: 80}
          - {containerPort: 443,    hostPort: 443}
          - {containerPort: 25565, hostPort: 25565}
          - {containerPort: 25566, hostPort: 25566}
        readinessProbe:
          httpGet:
            path: /lb-status
            port: 80
          initialDelaySeconds: 10
        env:
          - {name: PAGESPEED, value: "on"}
          - {name: LETSENCRYPT_DOMAINS, value: "www.rebelsoft.com|rebelsoft.com"}

  - name: kubernetes-ui
    ports:
      - port: 8000
    nodeSelector:
      zone: green
    replicas: 1
    annotations:
      nginx:
        - http:
          - server: kubernetes.*
            locations:
              - /kubernetes-ui
          - server: default
            locations:
              - /kubernetes-ui
      depends: [kubernetes]
    strategy: RollingUpdate
    containers:
      - name: kubernetes-ui
        image: tristar:5000/kubernetes-ui:latest
        imagePullPolicy: Always
        env:
          - {name: KUBECTL, value: "http://{{ ETCD_HOST }}:3000"}
          - {name: KMASTER, value: "http://{{ ETCD_HOST }}:8080"}

  - name: springboot
    ports:
      - {port: 8080, name: springboot}
      - {port: 10050, name: agent}
    replicas: 0
    annotations:
      nginx:
        - http:
          - server: springboot.*
            locations:
              - /
    strategy: RollingUpdate
    containers:
      - name: sprintboot
        image: tristar:5000/springboot:latest
        scm: https://github.com/mingfang/docker-springboot.git
        imagePullPolicy: Always
      - name: zabbix-agent
        image: tristar:5000/zabbix-agent:latest
        imagePullPolicy: Always
        env:
          - {name: ZABBIX_SERVER, value: zabbix}
          - {name: HOSTMETADATA, value: springboot}

  - name: kafka-manager
    ports:
      - port: 9000
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      nginx:
        - http:
            - server: kafka-manager.*
              locations:
                - /
      depends: [kafka]
      group: rtail
    strategy: RollingUpdate
    containers:
      - name: kafka-manager
        image: tristar:5000/kafka-manager:latest
        scm: https://github.com/mingfang/docker-kafka-manager.git
        imagePullPolicy: Always
        env:
          - {name: ZK_HOSTS, value: "zookeeper:2181"}

  - name: mongodb
    ports:
      - port: 27017
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      icon: https://avatars3.githubusercontent.com/u/45120?v=3&s=200
    strategy: RollingUpdate
    containers:
      - name: mongodb
        image: tristar:5000/mongodb:latest
        scm: https://github.com/mingfang/docker-mongodb.git
        imagePullPolicy: Always

  - name: gitlab
    ports:
      - {port: 80, name: http}
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      nginx:
        - http:
            - server: gitlab.*
              locations:
                - /
    strategy: RollingUpdate
    containers:
      - name: gitlab
        image: gitlab/gitlab-ce:latest
        imagePullPolicy: Always

  - name: kafka
    ports:
      - {port: 9092, name: kafka}
      - {port: 9999, name: jmx}
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      icon: http://kafka.apache.org/images/kafka_logo.png
      depends: [zookeeper]
      group: rtail
    strategy: RollingUpdate
    containers:
      - name: kafka
        image: tristar:5000/kafka:latest
        scm: https://github.com/mingfang/docker-kafka.git
        imagePullPolicy: Always
        env:
          - {name: ZOOKEEPER_HOST,  value: "zookeeper"}
          - {name: JMX_PORT,        value: "9999"}
          - {name: LOG_RETENTION_HOURS, value: "1"}
          - {name: LOG_RETENTION_BYTES, value: "1048576"}

  - name: zookeeper
    ports:
      - port: 2181
    nodeSelector:
      zone: green
    replicas: 1
    annotations:
      icon: https://zookeeper.apache.org/images/zookeeper_small.gif
      group: rtail
    strategy: RollingUpdate
    containers:
      - name: zookeeper
        image: tristar:5000/zookeeper:latest
        scm: https://github.com/mingfang/docker-zookeeper.git
        imagePullPolicy: Always

  - name: elasticsearch
    ports:
      - port: 9200
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      nginx:
        - http:
            - server: elasticsearch.*
              locations:
                - /
      group: rtail
    strategy: RollingUpdate
    containers:
      - name: elasticsearch
        image: tristar:5000/elasticsearch:latest
        scm: https://github.com/mingfang/docker-elasticsearch.git
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            path: /
            port: 9200
          initialDelaySeconds: 30
        env:
          - {name: CLUSTER_NAME, value: LOGS}

  - name: kibana
    ports:
      - port: 5601
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      nginx:
        - http:
            - server: kibana.*
              locations:
                - /
      depends: [elasticsearch]
    strategy: RollingUpdate
    containers:
      - name: kibana
        image: tristar:5000/kibana:latest
        scm: https://github.com/mingfang/docker-kibana.git
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            path: /
            port: 5601
          initialDelaySeconds: 30
        env:
          - {name: ELASTICSEARCH_HOST, value: elasticsearch}

  - name: uptime
    ports:
      - port: 8082
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      nginx:
        - http:
            - server: uptime.*
              locations:
                - /
    strategy: RollingUpdate
    containers:
      - name: uptime
        image: tristar:5000/uptime:latest
        scm: https://github.com/mingfang/docker-uptime.git
        imagePullPolicy: Always

  - name: prometheus
    ports:
      - port: 9090
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      nginx:
        - http:
            - server: prometheus.*
              locations:
                - /
      icon: https://avatars3.githubusercontent.com/u/3380462?v=3&s=200
      depends: [pushgateway]
      group: prometheus
    strategy: RollingUpdate
    containers:
      - name: prometheus
        image: tristar:5000/prometheus:latest
        scm: https://github.com/mingfang/docker-prometheus.git
        imagePullPolicy: Always

  - name: keycloak
    ports:
      - port: 8080
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      nginx:
        - http:
            - server: keycloak.*
              locations:
                - /
      icon: https://pbs.twimg.com/profile_images/428872865031536641/LMjCu1H7_400x400.png
    strategy: RollingUpdate
    containers:
      - name: keycloak
        image: tristar:5000/keycloak:latest
        scm: https://github.com/mingfang/docker-keycloak.git
        imagePullPolicy: Always

  - name: packetbeat
    ports:
      - {port: 5601, name: kibana}
      - {port: 9200, name: elasticsearch}
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      nginx:
        - http:
            - server: packetbeat.*
              locations:
                - /
    strategy: RollingUpdate
    containers:
      - name: packetbeat
        image: tristar:5000/packetbeat:latest
        scm: https://github.com/mingfang/docker-packetbeat.git
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            path: /
            port: 9200
          initialDelaySeconds: 30

  - name: odoo
    ports:
      - port: 8069
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      nginx:
        - http:
            - server: odoo.*
              locations:
                - /
    strategy: RollingUpdate
    containers:
      - name: odoo
        image: tristar:5000/odoo:latest
        scm: https://github.com/mingfang/docker-odoo.git
        imagePullPolicy: Always

#  - name: openproject
#    ports:
#      - port: 3000
#    annotations:
#      nginx:
#        - http:
#            - server: openproject.*
#              locations:
#                - /
#    strategy: RollingUpdate
#    containers:
#      - name: openproject
#        image: tristar:5000/openproject:latest
#        imagePullPolicy: Always
#        <<: *log-mount
#      - <<: *fluentd
#        env:
#          - <<: *zookeeper-host
#          - {name: LABEL, value: OPENPROJECT}
#    <<: *log-volume

  - name: minecraft
    ports:
      - {port: 25565, name: minecraft}
      - {port: 9001,  name: fontail}
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      nginx:
        - http:
          - server: minecraft.*
            port: 9001
            locations:
              - /
        - stream:
            - listen: 25565
      icon: http://images.wikia.com/yogbox/images/d/dd/Minecraft_Block.svg
    strategy: RollingUpdate
    containers:
      - name: minecraft
        image: tristar:5000/minecraft:latest
        scm: https://github.com/mingfang/docker-minecraft.git
        imagePullPolicy: Always

  - name: jenkins-test
    ports:
      - {port: 8080, name: http}
    annotations:
      nginx:
        - http:
          - server: jenkins-test.*
            locations:
              - /jenkins
    strategy: RollingUpdate
    replicas: 1
    containers:
      - name: jenkins
        image: tristar:5000/jenkins:latest
        scm: https://github.com/mingfang/docker-jenkins.git

  - name: jenkins
    ports:
      - {port: 8080, name: http}
      - {port: 8081, name: slave}
    annotations:
      nginx:
        - http:
          - server: jenkins.*
            locations:
              - /jenkins
          - server: default
            locations:
              - /jenkins
      icon: https://jenkins-ci.org/images/logo_head.png
      depends: [jenkins-swarm-client]
      group: jenkins
    strategy: RollingUpdate
    replicas: 1
    containers:
      - name: jenkins
        image: tristar:5000/jenkins:latest
        imagePullPolicy: Always
        env:
          - {name: KMASTER, value: "{{ ETCD_HOST }}"}
          - {name: http_proxy, value: "{{ HTTP_PROXY }}"}
          - {name: https_proxy, value: "{{ HTTP_PROXY }}"}
          - {name: no_proxy, value: "{{ ETCD_HOST }}"}
        volumeMounts:
          - {name: docker,  mountPath: /var/run/docker.sock}
          - {name: jenkins-ssh-key, mountPath: /etc/jenkins-ssh-key, readOnly: true}
        lifecycle:
          postStart:
            exec:
              command: ["sh", "-c", "mkdir -p /root/.ssh; cp /etc/jenkins-ssh-key/id-rsa /root/.ssh/id_rsa; chmod 0400 /root/.ssh/id_rsa"]
    volumes:
      - {name: docker, hostPath: {path: /var/run/docker.sock}}
      - {name: jenkins-ssh-key, secret: {secretName: jenkins-ssh-key}}

  - name: jenkins-swarm-client
    ports:
      - {port: 8080, name: http}
    replicas: 0
    annotations:
      group: jenkins
    nodeSelector:
      zone: green
    strategy: RollingUpdate
    containers:
      - name: jenkins-swarm-client
        image: tristar:5000/jenkins-swarm-client:latest
        scm: https://github.com/mingfang/docker-jenkins-swarm-client.git
        imagePullPolicy: Always
        volumeMounts:
          - {name: docker,  mountPath: /var/run/docker.sock}
        env:
          - {name: MASTER, value: "http://jenkins:8080/jenkins/"}
          - {name: USERNAME, value: "{{ jenkins_username }}"}
          - {name: PASSWORD, value: "{{ jenkins_password }}"}
          - {name: REGISTRY, value: "tristar:5000"}
          - {name: http_proxy, value: "http://ivy:3128"}
          - {name: https_proxy, value: "http://ivy:3128"}
          - {name: no_proxy, value: "jenkins"}
    volumes:
      - name: docker
        hostPath:
          path: /var/run/docker.sock

  - name: zabbix
    ports:
      - {port: 80, name: web}
      - {port: 10051, name: zabbix}
    replicas: 0
    annotations:
      nginx:
        - http:
          - server: zabbix.*
            locations:
              - /
      icon: http://www.zabbix.com/img/logo/zabbix_logo_500x131.png
      group: zabbix
      depends: [zabbix-db]
    nodeSelector:
      host: tristar
    strategy: RollingUpdate
    containers:
      - name: zabbix
        image: tristar:5000/zabbix:latest
        scm: https://github.com/mingfang/docker-zabbix.git
        imagePullPolicy: Always
        env:
          - {name: ZABBIX_DB, value: zabbix-db}

  - name: zabbix-db
    ports:
      - {port: 80, name: web}
      - {port: 3306, name: mysql}
    replicas: 0
    annotations:
      nginx:
        - http:
          - server: zabbix-db.*
            locations:
              - /
      icon: https://www.mysql.com/common/logos/logo-mysql-170x115.png
      group: zabbix
    nodeSelector:
      host: tristar
    strategy: RollingUpdate
    containers:
      - name: zabbix-db
        image: tristar:5000/zabbix-db:latest
        scm: https://github.com/mingfang/docker-zabbix-db.git
        imagePullPolicy: Always
        volumeMounts:
          - {name: data, mountPath: /var/lib/mysql}
    volumes:
      - name: data
        hostPath:
          path: '/root/zabbix-data'

  - name: rundeck
    ports:
      - {port: 8080, name: rundeck}
      - {port: 10050, name: agent}
    replicas: 0
    annotations:
      nginx:
        - http:
          - server: rundeck.*
            locations:
              - /
    strategy: RollingUpdate
    containers:
      - name: rundeck
        image: tristar:5000/rundeck:latest
        scm: https://github.com/mingfang/docker-rundeck.git
        imagePullPolicy: Always
      - name: zabbix-agent
        image: tristar:5000/zabbix-agent:latest
        imagePullPolicy: Always
        env:
          - {name: ZABBIX_SERVER, value: zabbix}
          - {name: HOSTMETADATA, value: springboot}

  - name: pushgateway
    ports:
      - port: 9091
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      metrics: /metrics
      group: prometheus
    strategy: RollingUpdate
    containers:
      - name: pushgateway
        image: prom/pushgateway
        imagePullPolicy: Always

  - name: rtail
    ports:
      - port: 8888
    replicas: 0
    nodeSelector:
      zone: green
    annotations:
      nginx:
        - http:
            - server: rtail.*
              locations:
                - /
      depends: [kafka, zookeeper, elasticsearch]
      group: rtail
    strategy: RollingUpdate
    containers:
      - name: rtail
        image: tristar:5000/rtail:latest
        imagePullPolicy: Always

  - name: httpbin
    ports:
      - port: 5000
    replicas: 0
    nodeSelector:
      zone: green
    annotations:
      nginx:
        - http:
            - server: httpbin.*
              locations:
                - /
              port: 5000
    strategy: RollingUpdate
    containers:
      - name: httpbin
        image: tristar:5000/httpbin:latest
        scm: https://github.com/mingfang/docker-httpbin.git
        imagePullPolicy: Always

  - name: graylog
    ports:
      - port: 80
        name: web-interface
      - port: 514
        name: syslog-tcp
      - port: 5555
        name: raw-tcp
      - port: 12201
        name: gelf-tcp
      - port: 12900
        name: graylog
    annotations:
      nginx:
        - http:
            - server: graylog.*
              locations:
                - /
    <<: *green
    replicas: 0
    strategy: RollingUpdate
    containers:
      - name: graylog
        image: tristar:5000/graylog:latest
        scm: https://github.com/mingfang/docker-graylog.git
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30

  - name: wiremock
    ports:
      - port: 8080
    replicas: 0
    nodeSelector:
      zone: green
    annotations:
      nginx:
        - http:
            - server: wiremock.*
              locations:
                - /
    strategy: RollingUpdate
    containers:
      - name: wiremock
        image: tristar:5000/wiremock:latest
        scm: https://github.com/mingfang/docker-wiremock.git
        imagePullPolicy: Always

  - name: zipkin
    ports:
      - {name: http, port: 8080}
      - {name: scribe, port: 1463}
    replicas: 0
    nodeSelector:
      zone: green
    annotations:
      nginx:
        - http:
            - server: zipkin.*
              locations:
                - /
      icon: https://raw.githubusercontent.com/openzipkin/zipkin/master/doc/zipkin-logo-200x119.jpg
    strategy: RollingUpdate
    containers:
      - name: zipkin
        image: tristar:5000/zipkin:latest
        scm: https://github.com/mingfang/docker-zipkin.git
        imagePullPolicy: Always
        env:
          - {name: KAFKA_ZOOKEEPER, value: "zookeeper:2181"}

  - name: squid
    ports:
      - port: 8080
    replicas: 0
    nodeSelector:
      zone: green
    annotations:
      nginx:
        - http:
            - server: squid.*
              locations:
                - /
    strategy: RollingUpdate
    containers:
      - name: squid
        image: tristar:5000/squid:latest
        scm: https://github.com/mingfang/docker-squid.git
        imagePullPolicy: Always

  - name: swagger-template
    ports:
      - port: 3000
    nodeSelector:
      zone: green
    replicas: 0
    annotations:
      nginx:
        - http:
            - server: swagger.*
              locations:
                - /
    strategy: RollingUpdate
    containers:
      - name: swagger-template
        image: tristar:5000/swagger-template:latest
        imagePullPolicy: Always

#spinnaker

  # - name: clouddriver
  #   ports:
  #     - port: 7002
  #   strategy: RollingUpdate
  #   replicas: 0
  #   containers:
  #     - name: clouddriver
  #       image: quay.io/spinnaker/clouddriver
  #       imagePullPolicy: Always
  #       command: ["sh", "-c", "/opt/clouddriver/bin/clouddriver 2>&1 > /var/log/clouddriver.log"]
  #       env:
  #         - {name: SERVICES_FRONT50_BASEURL, value: "http://front50:8080"}
  #         - {name: SPRING_CONFIG_LOCATION, value: "/opt/spinnaker/config/"}
  #       volumeMounts:
  #         - {name: spinnaker-config, mountPath: "/opt/spinnaker/config"}
  #   volumes:
  #     - {name: spinnaker-config, configMap: {name: spinnaker-config}}
  # - name: deck
  #   ports:
  #     - port: 9000
  #   annotations:
  #     nginx:
  #       - http:
  #           - server: deck.*
  #             locations:
  #               - /
  #   strategy: RollingUpdate
  #   replicas: 0
  #   containers:
  #     - name: deck
  #       image: quay.io/spinnaker/deck
  #       imagePullPolicy: Always
  #       command: ["sh", "-c", "cd /deck && npm start 2>&1 > /var/log/deck.log"]
  #       env:
  #         - {name: API_HOST, value: "http://gate.192.168.1.177.xip.io"}
  #         - {name: DECK_HOST, value: "0.0.0.0"}
  #         - {name: DECK_PORT, value: "9000"}
  #         - {name: PROTOCOL, value: "http"}
  #         - {name: SPRING_CONFIG_LOCATION, value: "/opt/spinnaker/config/"}
  #       volumeMounts:
  #         - {name: spinnaker-config, mountPath: "/opt/spinnaker/config"}
  #   volumes:
  #     - {name: spinnaker-config, configMap: {name: spinnaker-config}}

  # - name: echo
  #   ports:
  #     - port: 8089
  #   strategy: RollingUpdate
  #   replicas: 0
  #   containers:
  #     - name: echo
  #       image: quay.io/spinnaker/echo
  #       imagePullPolicy: Always
  #       command: ["sh", "-c", "/opt/echo/bin/echo 2>&1 > /var/log/echo.log"]
  #       env:
  #         - {name: FRONT50_BASEURL, value: "http://front50:8080"}
  #         - {name: ORCA_BASEURL, value: "http://orca:8083"}
  #         - {name: SPRING_CONFIG_LOCATION, value: "/opt/spinnaker/config/"}
  #         - {name: CASSANDRA_PORT, value: "9160"}
  #       volumeMounts:
  #         - {name: spinnaker-config, mountPath: "/opt/spinnaker/config"}
  #   volumes:
  #     - {name: spinnaker-config, configMap: {name: spinnaker-config}}

  # - name: front50
  #   ports:
  #     - port: 8080
  #   annotations:
  #     nginx:
  #       - http:
  #           - server: front50.*
  #             locations:
  #               - /
  #   strategy: RollingUpdate
  #   replicas: 0
  #   containers:
  #     - name: front50
  #       image: quay.io/spinnaker/front50
  #       imagePullPolicy: Always
  #       command: ["sh", "-c", "/opt/front50/bin/front50 2>&1 > /var/log/front50.log"]
  #       env:
  #         - {name: SPRING_CONFIG_LOCATION, value: "/opt/spinnaker/config/"}
  #         - {name: CASSANDRA_PORT, value: "9160"}
  #       volumeMounts:
  #         - {name: spinnaker-config, mountPath: "/opt/spinnaker/config"}
  #   volumes:
  #     - {name: spinnaker-config, configMap: {name: spinnaker-config}}

  # - name: gate
  #   ports:
  #     - port: 8084
  #   annotations:
  #     nginx:
  #       - http:
  #           - server: gate.*
  #             locations:
  #               - /
  #   strategy: RollingUpdate
  #   replicas: 0
  #   containers:
  #     - name: gate
  #       image: quay.io/spinnaker/gate
  #       imagePullPolicy: Always
  #       command: ["sh", "-c", "/opt/gate/bin/gate 2>&1 > /var/log/gate.log"]
  #       env:
  #         - {name: SERVICES_CLOUDDRIVER_HOST, value: "clouddriver"}
  #         - {name: SERVICES_ECHO_HOST, value: "echo"}
  #         - {name: SERVICES_FRONT50_HOST, value: "front50"}
  #         - {name: SERVICES_IGOR_HOST, value: "igor"}
  #         - {name: SERVICES_ORCA_HOST, value: "orca"}
  #         - {name: SPRING_CONFIG_LOCATION, value: "/opt/spinnaker/config/"}
  #       volumeMounts:
  #         - {name: spinnaker-config, mountPath: "/opt/spinnaker/config"}
  #   volumes:
  #     - {name: spinnaker-config, configMap: {name: spinnaker-config}}

  # - name: igor
  #   ports:
  #     - port: 8088
  #   strategy: RollingUpdate
  #   replicas: 0
  #   containers:
  #     - name: igor
  #       image: quay.io/spinnaker/igor
  #       imagePullPolicy: Always
  #       command: ["sh", "-c", "/opt/igor/bin/igor 2>&1 > /var/log/igor.log"]
  #       env:
  #         - {name: SERVICES_CLOUDDRIVER_HOST, value: "clouddriver"}
  #         - {name: SERVICES_ECHO_HOST, value: "echo"}
  #         - {name: SPRING_CONFIG_LOCATION, value: "/opt/spinnaker/config/"}
  #       volumeMounts:
  #         - {name: spinnaker-config, mountPath: "/opt/spinnaker/config"}
  #   volumes:
  #     - {name: spinnaker-config, configMap: {name: spinnaker-config}}

  # - name: orca
  #   ports:
  #     - port: 8083
  #   annotations:
  #     nginx:
  #       - http:
  #           - server: orca.*
  #             locations:
  #               - /
  #   strategy: RollingUpdate
  #   replicas: 0
  #   containers:
  #     - name: orca
  #       image: quay.io/spinnaker/orca
  #       imagePullPolicy: Always
  #       env:
  #         - {name: SERVICES_CLOUDDRIVER_HOST, value: "clouddriver"}
  #         - {name: SERVICES_ECHO_HOST, value: "echo"}
  #         - {name: SERVICES_FRONT50_HOST, value: "front50"}
  #         - {name: SERVICES_IGOR_HOST, value: "igor"}
  #         - {name: SPRING_CONFIG_LOCATION, value: "/opt/spinnaker/config/"}
  #       volumeMounts:
  #         - {name: spinnaker-config, mountPath: "/opt/spinnaker/config"}
  #   volumes:
  #     - {name: spinnaker-config, configMap: {name: spinnaker-config}}

  # - name: redis
  #   ports:
  #     - port: 6379
  #   annotations:
  #     icon: http://redis.io/images/redis-white.png
  #   strategy: RollingUpdate
  #   containers:
  #     - name: redis
  #       image: tristar:5000/redis
  #       scm: https://github.com/mingfang/docker-redis.git
  #       imagePullPolicy: Always

  # - name: rosco
  #   ports:
  #     - port: 8087
  #   strategy: RollingUpdate
  #   replicas: 0
  #   containers:
  #     - name: rosco
  #       image: quay.io/spinnaker/rosco
  #       imagePullPolicy: Always
  #       env:
  #         - {name: API_HOST, value: "http://gate:8084"}

  # - name: rush
  #   ports:
  #     - port: 8085
  #   strategy: RollingUpdate
  #   replicas: 0
  #   containers:
  #     - name: rush
  #       image: quay.io/spinnaker/rush
  #       imagePullPolicy: Always
  #       env:
  #         - {name: API_HOST, value: "http://gate:8084"}
  #         - {name: CASSANDRA_PORT, value: "9160"}

  - name: cassandra
    ports:
      - {port: 9042, name: cql}
      - {port: 9160, name: thirft}
    annotations:
      icon: https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Cassandra_logo.svg/1280px-Cassandra_logo.svg.png
    strategy: RollingUpdate
    replicas: 1
    containers:
      - name: cassandra
        image: tristar:5000/spinnaker-cassandra
        lifecycle:
          postStart:
            exec:
              command: ["/setup.sh"]

  # - name: gocd
  #   ports:
  #     - port: 8153
  #   annotations:
  #     nginx:
  #       - http:
  #         - server: default
  #           locations:
  #             - /go
  #   nodeSelector:
  #     kubernetes.io/hostname: 192.168.1.160
  #   strategy: RollingUpdate
  #   containers:
  #     - name: gocd
  #       image: goserver:latest
  #       imagePullPolicy: Never
  #       volumeMounts:
  #         - {name: go,       mountPath: /etc/go}
  #         - {name: goserver, mountPath: /etc/default/go-server}
  #         - {name: goagent,  mountPath: /etc/default/go-agent}
  #         - {name: db,       mountPath: /var/lib/go-server/db}
  #         - {name: docker,   mountPath: /var/run/docker.sock}
  #   volumes:
  #     - name: go
  #       hostPath:
  #         path: /root/docker-gocd/etc/go
  #     - name: goserver
  #       hostPath:
  #         path: /root/docker-gocd/etc/default/go-server
  #     - name: goagent
  #       hostPath:
  #         path: /root/docker-gocd/etc/default/go-agent
  #     - name: db
  #       hostPath:
  #         path: /root/docker-gocd/db
  #     - name: docker
  #       hostPath:
  #         path: /var/run/docker.sock

  # - name: ceph-mon-tristar
  #   ports:
  #     - {name: mon, port: 6789}
  #   nodeSelector:
  #     host: tristar
  #   containers:
  #     - name: ceph-mon
  #       image: "ceph/daemon"
  #       imagePullPolicy: Always
  #       env:
  #         - {name: CEPH_DAEMON, value: mon}
  #         - {name: CEPH_PUBLIC_NETWORK, value: "10.244.0.0/16"}
  #         - {name: MON_IP_AUTO_DETECT, value: "1"}
  #       volumeMounts:
  #         - {name: etc-ceph, mountPath: /etc/ceph}
  #         - {name: var-lib-ceph, mountPath: /var/lib/ceph}
  #   volumes:
  #     - name: etc-ceph
  #       hostPath:
  #         path: /etc/ceph
  #     - name: var-lib-ceph
  #       hostPath:
  #         path: /var/lib/ceph

  - name: spark-master
    ports:
      - {port: 7077, name: master}
      - {port: 6066, name: rest}
      - {port: 8080, name: ui}
    annotations:
      nginx:
        - http:
          - server: spark-master.*
            port: 7077
            locations:
              - /
          - server: spark-rest.*
            port: 6066
            locations:
              - /
          - server: spark-ui.*
            port: 8080
            paths:
              - path: /
                directives:
                  - sub_filter_types text/html;
                  - sub_filter 'href=\"http://' 'href=\"/proxy:';
                  - sub_filter_once off;
              - path: ~ /proxy:(?<targetHost>[^\/?#]*)(?<targetPath>.*)
                directives:
                  - proxy_pass http://$targetHost$targetPath$is_args$args;
                  - proxy_redirect ~http:\/\/.*\/(.+)$ http://$host$uri/$1;
                  - sub_filter_types text/html;
                  - sub_filter 'href=\"/' 'href=\"/proxy:$targetHost/';
                  - sub_filter 'href=\"log' 'href=\"/proxy:$targetHost/log';
                  - sub_filter 'href=\"http://' 'href=\"/proxy:';
                  - sub_filter 'src=\"/' 'src=\"/proxy:$targetHost/';
                  - sub_filter 'action=\"/' 'action=\"/proxy:$targetHost/';
                  - sub_filter_once off;
                no_proxy: true
      icon: http://spark.apache.org/docs/latest/img/spark-logo-hd.png
    strategy: RollingUpdate
    replicas: 1
    containers:
      - name: spark-master
        image: tristar:5000/spark-master
        env:
          - {name: SPARK_MASTER_PORT, value: "7077"}

  - name: zeppelin
    ports:
      - port: 8080
    annotations:
      nginx:
        - http:
          - server: zeppelin.*
            port: 8080
            paths:
              - path: /
      icon: http://hortonworks.com/wp-content/uploads/2016/03/ZeppelinLogo.png
    strategy: RollingUpdate
    replicas: 1
    containers:
      - name: zeppelin
        image: tristar:5000/zeppelin
        env:
          - {name: ZEPPELIN_PORT, value: "8080"}

  # - name: flink-master
  #   ports:
  #     - {port: 6123, name: rpc}
  #     - {port: 8081, name: ui}
  #   annotations:
  #     nginx:
  #       - http:
  #         - server: flink.*
  #           port: 8081
  #           paths:
  #             - path: /
  #     icon: https://ci.apache.org/projects/flink/flink-docs-release-1.0/page/img/navbar-brand-logo.jpg
  #   strategy: RollingUpdate
  #   replicas: 1
  #   containers:
  #     - name: flink-master
  #       image: tristar:5000/flink-master
